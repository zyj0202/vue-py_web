"""
Django settings for drf_end project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q00m-3$@%2c$j+w&wc^&aeur@&*7d72-ua_65nz@y9gqf!sui_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop',
    'rest_framework',
    'django_filters',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',    #
    'django.middleware.security.SecurityMiddleware',   # 为request/response提供了几种安全改进，无它不安全
    'django.contrib.sessions.middleware.SessionMiddleware',  # 开启session会话支持，无它无session
# 基于APPEND_SLASH和PREPEND_WWW的设置来重写URL，如果APPEND_SLASH设为True，并且初始URL没有以斜线结尾以及在URLconf中没找到对应定义
# 这时形成一个斜线结尾的新URL；如果PREPEND_WWW设为True，前面缺少 www.的url将会被重定向到相同但是以一个www.开头的url。
    'django.middleware.common.CommonMiddleware',
# 添加跨站点请求伪造的保护，通过向POST表单添加一个隐藏的表单字段，并检查请求中是否有正确的值，无它无csrf保护
    # 'django.middleware.csrf.CsrfViewMiddleware',
# 在视图函数执行前向每个接收到的user对象添加HttpRequest属性，表示当前登录的用户，无它用不了request.user
    'django.contrib.auth.middleware.AuthenticationMiddleware',
# 开启基于Cookie和会话的消息支持，无它无message
    'django.contrib.messages.middleware.MessageMiddleware',
# 对点击劫持的保护
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'drf_end.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drf_end.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

#  数据库的配置参数
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    # 'default': {
    # 找到django的项目自带的数据库模块，也可以安装第三方数据库模块 修改ENGINE的模块路径
    #     'ENGINE': 'django.db.backends.mysql',
    # NAME为数据库的名字，mysql的数据库一定要手动创建好 create database 数据库名字 charset=utf8;
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    #     'USER':'root', 用户名
    #     'PASSWORD':'123456', 密码
    #     'HOST':'localhost' 远程数据库写ip  本机localhost 默认是本机 可以不写该字段0
    #     'PORT':'3306' 数据库的端口号  默认是3306 没改可不写
    # }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
# 配置媒体资源路径信息
MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_FILES = [os.path.join(BASE_DIR,'media')]

# 在django项目重新配置DjangoRestFramework
# 查看RestFulFramework的配置文件settings.py
# 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.openapi.AutoSchema',
# 因为版本问题没写get，link方法 所以换成直接用AutoSchema
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',

    # 默认权限配置  每一个http方法都可以有对应的权限配置
    # 全局配置 优先级高于视图类中的配置
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    # 全局认证  优先级高于视图类中的配置
    'DEFAULT_AUTHENTICATION_CLASSES': [

        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 默认首先使用session认证
        # 在rest_framework包的authentication.py源码中BaseAuthentication 是所有认证类的父类
        # cookie与session cookie是存储在浏览器上的非敏感数据
        # session为存储在服务器上的敏感数据，但是session离不开cookie 因为session的sessionid存储在浏览器中

        # 发起请求时 需要在Cookie中携带 sessionid csrftoken 在header中携带X-CSRFToken值可以在浏览器登录用户之后找cookie(csrftoken的值)复制
        # 'rest_framework.authentication.SessionAuthentication',
        # 默认使用Basic认证，账户名密码(如果通过session认证就不执行basic认证)
        # 发起请求时 可将用户账号密码 进行编码写入 Authorization中然后携带着发起请求
        # 将请求中HTTP_AUTHORIZATION携带的类似于Basic YWRtaW46MTIzNDU2的数据提取到 进行解码处理得到对应的用户(账号密码)获取用户成功 认证成功 获取失败认证失败
        # 'rest_framework.authentication.BasicAuthentication'
    ],
    # 配置全局的频次限制类，反爬虫
    # 默认的频次限制类
    'DEFAULT_THROTTLE_CLASSES': ['rest_framework.throttling.AnonRateThrottle',
                                 'rest_framework.throttling.UserRateThrottle'],
    # 默认的频次限制属性
    'DEFAULT_THROTTLE_RATES': {
        'user': '100/day',
        'anon': '1000/day',
    },
    # 全局配置分页
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 2,

    # 配置全局过滤
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],

}


AUTH_USER_MODEL = 'shop.User'

# 自定义认证类 应用名.文件名.认证类名
AUTHENTICATION_BACKENDS = ('shop.authbackend.MyLoginBackend',)

# DRF提供了分页pagination 建立在Django基础上进行基础封装
# django自带的分页器
# from django.core.paginator import Paginator,page
# Paginator(将列表分为多个页) Page(每一个页)

# 配置允许跨域
CORS_ORIGIN_ALLOW_ALL = True
